#Date: 12/4/2024
#Author: Murilo Ferreira Lopes
#Code Goal: Answer for 'Number_of_Connected_Components_in_an_Undirected_Graph' problem in NeetCode

from typing import List

class Solution:
    def countComponents(self, n: int, edges: List[List[int]]) -> int:
        #set that stores visited nodes
        visited = {-1}
        visited.remove(-1)
        #case handling 0 edges
        if (len(edges) == 0):
            return n
        #Multi-Node counter
        counter = 0
        #current nodes left to count tracker
        curr_n = n
        
        while curr_n != 0:
            prev_n = curr_n
            #If there are still graphs to account for, perform preparation program
            if (len(edges) >= 1):
                visited.add(edges[0][0])
                visited.add(edges[0][1])
                del edges[0]
                counter += 1
            i = 0
            #Eliminate all connected edges of current graph
            while i < len(edges):
                if visited.__contains__(edges[i][0]) or visited.__contains__(edges[i][1]):
                    visited.add(edges[i][0])
                    visited.add(edges[i][1])
                    del edges[i]
                    i = -1
                i+=1
            curr_n = n - len(visited)
            #If there were no changes to node tracker
            if (curr_n == prev_n):
                break
        #Sum all graphs
        return counter + curr_n
